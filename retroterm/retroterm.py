#!/usr/bin/python
'''Retro Terminal Program '''

import sys
python3 = sys.version_info.major == 3

import argparse
if python3: import queue
else: import Queue as queue
import socket
import string
import telnetlib as tl
if python3: from tkinter import *
else: from tkinter import *

BBSLIST = [
["default", "", "23"],
["retrobbs", "ohiodivide.com", "2323"],
["local", "localhost", "2323"],
["RetroBBS", "66.172.27.229", "2323"],
["Birdbrain BBS", "birdbrainbbs.ufud.org", "64"]
]

HOST = BBSLIST[0]
HOSTDESC = HOST[0]
HOSTNAME = HOST[1]
HOSTPORT = HOST[2]

KEYMAP = {33:'\x17',34:'\x1a',35:'\x06',36:'\x01',37:'\x13',38:'\x05',39:'\x04',40:'\x18',45:'\x07',46:'\x7f'}

#Character Set Bitmap Data
#each element contains the xbmp data for a single 16x16 character
#element is equal to the ASCII value of the character minus 32
CHARDATA = [
"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x30,0x03,0x30,0x03,0x30,0x03,0x30,0x03,0x30,0x03,0x30,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x30,0x03,0x30,0x03,0x30,0x03,0x30,0x03,0xfc,0x0f,0xfc,0x0f,0x30,0x03,0x30,0x03,0xfc,0x0f,0xfc,0x0f,0x30,0x03,0x30,0x03,0x30,0x03,0x30,0x03,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0xf0,0x0f,0xf0,0x0f,0xcc,0x00,0xcc,0x00,0xf0,0x03,0xf0,0x03,0xc0,0x0c,0xc0,0x0c,0xfc,0x03,0xfc,0x03,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x3c,0x00,0x3c,0x00,0x3c,0x0c,0x3c,0x0c,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x0c,0x0f,0x0c,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x00,0x00,0x00",
"0x30,0x00,0x30,0x00,0xcc,0x00,0xcc,0x00,0xcc,0x00,0xcc,0x00,0x30,0x00,0x30,0x00,0xcc,0x0c,0xcc,0x0c,0x0c,0x03,0x0c,0x03,0xf0,0x0c,0xf0,0x0c,0x00,0x00,0x00,0x00",
"0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x30,0x00,0x30,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0x00,0x03,0x00,0x03,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0xcc,0x0c,0xcc,0x0c,0xf0,0x03,0xf0,0x03,0xc0,0x00,0xc0,0x00,0xf0,0x03,0xf0,0x03,0xcc,0x0c,0xcc,0x0c,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xfc,0x0f,0xfc,0x0f,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x0c,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x0c,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0f,0x0c,0x0f,0xcc,0x0c,0xcc,0x0c,0x3c,0x0c,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0xf0,0x00,0xf0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x00,0x0c,0x00,0x0c,0xc0,0x03,0xc0,0x03,0x30,0x00,0x30,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00",
"0xfc,0x0f,0xfc,0x0f,0x00,0x0c,0x00,0x0c,0x00,0x03,0x00,0x03,0xc0,0x03,0xc0,0x03,0x00,0x0c,0x00,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x00,0x03,0x00,0x03,0xc0,0x03,0xc0,0x03,0x30,0x03,0x30,0x03,0x0c,0x03,0x0c,0x03,0xfc,0x03,0xfc,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00",
"0xfc,0x0f,0xfc,0x0f,0x0c,0x00,0x0c,0x00,0xfc,0x03,0xfc,0x03,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xc0,0x0f,0xc0,0x0f,0x30,0x00,0x30,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xfc,0x0f,0xfc,0x0f,0x00,0x0c,0x00,0x0c,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x0f,0xf0,0x0f,0x00,0x0c,0x00,0x0c,0x00,0x03,0x00,0x03,0xfc,0x00,0xfc,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x00,0x00,0x00,0x00",
"0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x0c,0x00,0x0c,0x00,0x30,0x00,0x30,0x00,0xc0,0x00,0xc0,0x00,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x30,0x00,0x30,0x00,0xc0,0x00,0xc0,0x00,0x00,0x03,0x00,0x03,0x00,0x0c,0x00,0x0c,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0xcc,0x0c,0xcc,0x0c,0xcc,0x0f,0xcc,0x0f,0xcc,0x03,0xcc,0x03,0x0c,0x00,0x0c,0x00,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0x30,0x03,0x30,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xfc,0x0f,0xfc,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xfc,0x03,0xfc,0x03,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xfc,0x03,0xfc,0x03,0x00,0x00,0x00,0x00",
"0xfc,0x0f,0xfc,0x0f,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x03,0xfc,0x03,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00",
"0xfc,0x0f,0xfc,0x0f,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x03,0xfc,0x03,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x00,0x00,0x00,0x00",
"0xf0,0x0f,0xf0,0x0f,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x0f,0x0c,0x0f,0x0c,0x0c,0x0c,0x0c,0xf0,0x0f,0xf0,0x0f,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xfc,0x0f,0xfc,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x03,0x0c,0x03,0xcc,0x00,0xcc,0x00,0x3c,0x00,0x3c,0x00,0xcc,0x00,0xcc,0x00,0x0c,0x03,0x0c,0x03,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x3c,0x0f,0x3c,0x0f,0xcc,0x0c,0xcc,0x0c,0xcc,0x0c,0xcc,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x0c,0x3c,0x0c,0xcc,0x0c,0xcc,0x0c,0x0c,0x0f,0x0c,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xfc,0x03,0xfc,0x03,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xcc,0x0c,0xcc,0x0c,0x0c,0x03,0x0c,0x03,0xf0,0x0c,0xf0,0x0c,0x00,0x00,0x00,0x00",
"0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xfc,0x03,0xfc,0x03,0xcc,0x00,0xcc,0x00,0x0c,0x03,0x0c,0x03,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x0c,0x00,0xf0,0x03,0xf0,0x03,0x00,0x0c,0x00,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0xfc,0x0f,0xfc,0x0f,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x30,0x03,0x30,0x03,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xcc,0x0c,0xcc,0x0c,0xcc,0x0c,0xcc,0x0c,0x3c,0x0f,0x3c,0x0f,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x30,0x03,0x30,0x03,0xc0,0x00,0xc0,0x00,0x30,0x03,0x30,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x30,0x03,0x30,0x03,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0xfc,0x0f,0xfc,0x0f,0x00,0x0c,0x00,0x0c,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00",
"0xf0,0x0f,0xf0,0x0f,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xf0,0x0f,0xf0,0x0f,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x0c,0x00,0x0c,0x00,0x30,0x00,0x30,0x00,0xc0,0x00,0xc0,0x00,0x00,0x03,0x00,0x03,0x00,0x0c,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0xfc,0x03,0xfc,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0xfc,0x03,0xfc,0x03,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0x30,0x03,0x30,0x03,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00",
"0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0c,0xf0,0x0c,0x0c,0x0f,0x0c,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0x0f,0x0c,0x0f,0xf0,0x0c,0xf0,0x0c,0x00,0x00,0x00,0x00",
"0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0xcc,0x03,0xcc,0x03,0x3c,0x0c,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x0c,0x3c,0x0c,0xcc,0x03,0xcc,0x03,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0xc0,0x0f,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xc0,0x0f,0xc0,0x0f,0x00,0x00,0x00,0x00",
"0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0xf0,0x0c,0xf0,0x0c,0x0c,0x0f,0x0c,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0x0f,0x0c,0x0f,0xf0,0x0c,0xf0,0x0c,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0xfc,0x0f,0xfc,0x0f,0x0c,0x00,0x0c,0x00,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xf0,0x03,0xf0,0x03,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0c,0xf0,0x0c,0x0c,0x0f,0x0c,0x0f,0x0c,0x0c,0x0c,0x0c,0xf0,0x0f,0xf0,0x0f,0x00,0x0c,0x00,0x0c,0xf0,0x03,0xf0,0x03",
"0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0xf0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0xf0,0x00,0xf0,0x00",
"0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x03,0x0c,0x03,0xcc,0x00,0xcc,0x00,0xfc,0x00,0xfc,0x00,0x0c,0x03,0x0c,0x03,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0xf0,0x00,0xf0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x0f,0x3c,0x0f,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x03,0xfc,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x03,0xf0,0x03,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x03,0xf0,0x03,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcc,0x03,0xcc,0x03,0x3c,0x0c,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x0c,0x3c,0x0c,0xcc,0x03,0xcc,0x03,0x0c,0x00,0x0c,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0c,0xf0,0x0c,0x0c,0x0f,0x0c,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0x0f,0x0c,0x0f,0xf0,0x0c,0xf0,0x0c,0x00,0x3c,0x00,0x3c",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcc,0x03,0xcc,0x03,0x3c,0x00,0x3c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0f,0xf0,0x0f,0x0c,0x00,0x0c,0x00,0xf0,0x03,0xf0,0x03,0x00,0x0c,0x00,0x0c,0xfc,0x03,0xfc,0x03,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xfc,0x0f,0xfc,0x0f,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xf0,0x0f,0xf0,0x0f,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x30,0x03,0x30,0x03,0x30,0x03,0x30,0x03,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0x30,0x0f,0x30,0x0f,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x0c,0x0c,0x0c,0x30,0x03,0x30,0x03,0xc0,0x00,0xc0,0x00,0x30,0x03,0x30,0x03,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0xf0,0x0f,0xf0,0x0f,0x00,0x0c,0x00,0x0c,0xf0,0x03,0xf0,0x03",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0xfc,0x0f,0xfc,0x0f,0x00,0x00,0x00,0x00",
"0x00,0x0f,0x00,0x0f,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x30,0x00,0x30,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x0f,0x00,0x0f,0x00,0x00,0x00,0x00",
"0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x00,0x00,0x00",
"0x3c,0x00,0x3c,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x03,0x00,0x03,0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,0x3c,0x00,0x3c,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x0c,0xf0,0x03,0xf0,0x03,0x0c,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x33,0x33,0x33,0x33,0xcc,0xcc,0xcc,0xcc,0x33,0x33,0x33,0x33,0xcc,0xcc,0xcc,0xcc,0x33,0x33,0x33,0x33,0xcc,0xcc,0xcc,0xcc,0x33,0x33,0x33,0x33,0xcc,0xcc,0xcc,0xcc",
"0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff",
"0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00",
"0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff",
"0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff",
"0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00",
"0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff",
"0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff",
"0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00",
"0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff",
"0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff,0x00,0xff",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xff,0x01,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x01,0xff,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x80,0xff,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01",
"0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0xff,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xff,0xff,0xff,0xff,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0xff,0x80,0xff,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01",
"0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xff,0x01,0xff,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01",
"0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00",
"0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01",
"0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01",
"","","","",""
]

#XBM Data Template
XHEAD = "#define im_width 16\n#define im_height 16\nstatic char im_bits[] = {\n"
XTAIL = "\n};\n"


#Constants
BACKGROUND = 'Lime Green'
FOREGROUND = 'Black'
VDT_COLUMNS = 32
VDT_ROWS = 24
VDT_TABSTOP = 8

class Character(Canvas):
  '''Character cell: displays of a single character'''
  def __init__(self, master, **args):
    Canvas.__init__(self, master, **args)
    self.config(background=BACKGROUND, highlightthickness=0)
    self.__bitmap = None
  def __drawBitmap(self):
    #draw current bitmap onto instance
    if self.__bitmap:
      self.create_image(8, 8, image=self.__bitmap)
  def drawBitmap(self, bitmap):
    '''Set and draw the specified bitmap on instance.
       If bitmap=None, current bitmap is removed from cell and undrawn'''
    self.__bitmap = bitmap
    self.delete(ALL)
    self.__drawBitmap()
  def setCursor(self, state):
    '''Set cursor state.
       If state=True, cursor is drawn on cell
       If state=False, current bitmap is drawn on cell'''
    self.delete(ALL)
    if state:
      self.create_rectangle(0,0,16,16, fill=FOREGROUND)
    else:
      self.__drawBitmap()
  def getBitmap(self):
    '''Return bitmap currently assigned to cell'''
    return self.__bitmap
    
class VDT(Frame):
  def __leftClick(self, event):
    self.focus()
  def __buildchar(self, chardata):
    #builds XBMP string from character pixel data
    if len(chardata): return XHEAD + chardata + XTAIL
    else: return None
  def __buildcharset(self):
    #Builds a dictionary of bitmaps from list CHARDATA
    #Dictionary key is ASCII character code
    charset = dict()
    i = 0
    while i < len(CHARDATA):
      xbm = self.__buildchar(CHARDATA[i])
      if xbm: bitmap = BitmapImage(data=xbm, foreground=FOREGROUND)
      else: bitmap = None
      charset[i] = bitmap
      i += 1
    return charset
  def __builddisplay(self):
    #Builds a grid of Characters VDT_COLUMNS wide by VDT_COLUMNS high
    size = 8 * self.__scale
    display = dict()
    row = 0
    while row < VDT_ROWS:
      column = 0
      while column < VDT_COLUMNS:
        canvas = Character(self, width=size, height=size)
        canvas.grid(row=row, column=column)
        canvas.bind("<1>", self.__leftClick)
        display[row*VDT_COLUMNS+column] = canvas
        column += 1
      row += 1
    return display
  def __buildTextbuffer(self, size):
    return bytearray(size)
  def homeCursor(self):
    '''Move cursor to home position: row 0, column 0'''
    self.__row = 0
    self.__column = 0        
  def __init__(self, master, scale=2):
    Frame.__init__(self, master)
    self.config(background=BACKGROUND)
    self.__scale = scale
    self.__charset = self.__buildcharset()
    self.__maxchar = len(self.__charset) - 1
    self.__display = self.__builddisplay()
    self.__textbuffer = self.__buildTextbuffer(len(self.__display))
    self.__lastChar = None
    self.homeCursor()
  def __fillDisplay(self, bitmap=None):
    #fillse all display cells with specified bitmap
    for i in self.__display:
      self.__display[i].drawBitmap(bitmap)
  def __fillTextBuffer(self, char=0):
    #fills the text buffer with specified character
    for i in range(0,len(self.__textbuffer)-1):
      self.__textbuffer[i] = char
  def clearScreen(self):
    '''Clear screen and move cursor to home position'''
    self.__fillDisplay()
    self.__fillTextBuffer()
    self.homeCursor()
  def __getCanvas(self):
    #returns canvas at current row and column
    return self.__display[self.__getCurrentIndex()]
  def __getIndex(self, row, column):
    #returns index for current row and column
    return row * VDT_COLUMNS + column
  def __getCurrentIndex(self):
    #returns index for current row and column
    return self.__getIndex(self.__row, self.__column)
  def drawChar(self, char):
    '''Draw ASCII character char at current row and column'''
    c = 0 if char==None else ord(char)    
    canvas = self.__getCanvas()
    if c <= self.__maxchar:
      bitmap = self.__charset[c]
      canvas.drawBitmap(bitmap)
      self.__textbuffer[self.__getCurrentIndex()] = c
  def getText(self, trim=True):
    lines = []
    last = 0
    for row in range(0, VDT_ROWS):
      i = row * VDT_COLUMNS
      bytes = self.__textbuffer[i:i+VDT_COLUMNS]
      if trim: 
        while len(bytes) and bytes[-1] == 0: bytes.pop()
      if len(bytes): last = row+1
      line = bytes.decode('ASCII')
      lines.append(line.replace('\x00',' '))
    print(last)
    return lines[0:last]
  def setCursor(self, state):
    '''Set cursor state.
       If state = True, turn cursor on
       If state = False, turn cursor off'''
    self.__getCanvas().setCursor(state)
  def scrollUp(self):
    '''Scroll screen up one line.'''
    display = self.__display
    displen = len(display)
    i = 0
    for i in range(0,displen):
      j = i + VDT_COLUMNS
      if j < displen:
        bitmap = display[j].getBitmap()
      else:
        bitmap = None
      display[i].drawBitmap(bitmap)
  def firstColumn(self):
    '''Move cursor to leftmost column of current row.'''
    self.__column = 0
  def lastColumn(self):
    '''Move cursor to rightmost column of current row.'''
    self.__column = VDT_COLUMNS - 1
  def backSpace(self):
    '''Move cursor to left and delete character in new position.'''
    if self.__column:
        self.__column -= 1
    elif self.__row:
      self.__row -= 1
      self.lastColumn()
    self.drawChar(None)
  def nextRow(self):
    '''Move cursor to down one row, staying on same column.'''
    if self.__row < VDT_ROWS-1:
      self.__row += 1
    else:
      self.scrollUp()
  def newLine(self):
    '''Move cursor to the leftmost column of the row below the current row.'''
    self.nextRow()
    self.firstColumn()
  def nextColumn(self, columns=1):
    '''Move cursor one column to the right, wrapping to next line if needed.'''
    self.__column += columns
    if self.__column >= VDT_COLUMNS:
      self.newLine()
  def nextTab(self):
    '''Move cursor right to next tab stop, wrapping to next line if needed.'''
    offset = self.__column % VDT_TABSTOP
    columns = VDT_TABSTOP - offset
    self.nextColumn(columns)
  def printChar(self, char):
    '''Print ASCII character char.
       If char is printable,  draw and move cursor to right.
       If char is control chacter, perform associated action.
         Hex Char Action
          07 BEL  Beep (may not work)
          08 BS   execute self.Backspace()
          09 TAB  execute self.nextTab()
          0A LF   execute self.newLine() if last character was not CR
          0C FF   execute self.clearScreen()
          0D CR   execute self.newLine()
       Otherwise, do nothing.'''
    i = ord(char)
    if char >= ' ':
      self.drawChar(char)
      self.nextColumn()
    elif i == 0x07:  #BEL
      self.bell()
    elif i == 0x08:  #BS
      self.backSpace()
    elif i == 0x09:  #TAB
      self.nextTab()
    elif i == 0x0A:  #LF
      if self.__column: 
        self.newLine()
    elif i == 0x0C:  #FF
      self.clearScreen()
    elif i == 0x0D:  #CR
      self.newLine()
    elif i == 0x11:  #DC1
      pass #start data capture
    elif i == 0x13:  #DC3
      pass #end data capture
    self.__lastChar = char

class Modem(object):
  def __sendraw(self, skt, data):
    self.__telnet.msg("send %r", data)
    skt.sendall(data)
  def __negotiate_option(self, skt, cmd, opt):
    #override default negotiations
    if cmd == tl.DO:
      rsp = tl.IAC + tl.WONT + opt
    elif cmd == tl.DONT:
      rsp = tl.IAC + tl.WONT + opt
    elif cmd == tl.WILL:
      rsp = tl.IAC + tl.DO + opt
    elif cmd == tl.WONT:
      rsp = tl.IAC + tl.DONT + opt
    else:
      rsp = None
    if rsp: self.__sendraw(skt, rsp)
  def __init__(self, incharfn, afterfn, disconnectfn):
    object.__init__(self)
    self.inchar_callback = incharfn
    self.after_callback = afterfn
    self.disconnect_callback = disconnectfn
    self.outbuffer = queue.Queue()
    self.inbuffer = queue.Queue()
    self.__telnet = tl.Telnet()
    self.__telnet.set_option_negotiation_callback(self.__negotiate_option)
    self.__delay = 33  #33 Millisecons is about 300bps
    self.connected = False
  def __clear_inbuffer(self):
    while not self.inbuffer.empty():
      self.inbuffer.get()
  def __echo(self, data, newline=True):
    if newline: self.inbuffer.put('\n')
    for char in data:
      self.inbuffer.put(char)
    if newline: self.inbuffer.put('\r')
  def __read(self):
    try:
      data = self.__telnet.read_very_eager()
    except Exception as x:
      self.connected = False
      if python3: data = bytes(str(x) + "\r", "ASCII")
      else: data = x.message
    return data
  def __write(self, data):
    if python3: data = bytes(data, 'ASCII')
    try:
      self.__telnet.write(data)
    except Exception as x:
      self.connected = False
  def __timer(self):
    #Handle Modem Input and Output
    #executed every self._delay milliseconds to simulate desired bps rate
    if self.connected:
      data = self.__read()            #copy incoming data from modem
      for char in data:               #to input buffer
        if python3: char = chr(char)              
        self.inbuffer.put(char)       #as separate characters
      if not self.outbuffer.empty():
        char = self.outbuffer.get()   #copy one character from output buffer
        self.__write(char)            #to modem
    else:
      self.disconnect_callback()
    if not self.inbuffer.empty():
      char = self.inbuffer.get()
      self.inchar_callback(char)
    if self.connected or not self.inbuffer.empty():
      self.after_callback(self.__delay, self.__timer)
  def connect(self, host, port=23):
    '''Connect via telnet protocol to host using port'''
    try:
      portno = int(port)
      if portno<0 or portno>65535: raise ValueError()
      self.__telnet.open(host, portno, 1)
      self.connected = True
      result = "Connected"
    except socket.gaierror as x:
      result = "Invalid Host"
    except ValueError as x:
      result = "Invalid Port"
    except Exception as x:
      if python3: result = str(x)
      else: result = x.message
    self.__echo(result)
    self.__timer()
  def disconnect(self):
    self.__telnet.close()
    self.connected = False
    self.__clear_inbuffer
    self.__echo("Disconnected")
  def outchar(self, char):
    '''Send character to modem'''
    if char and self.connected: 
      #if Ctrl-C, abort display of incoming data
      if char == '\x03': self.__clear_inbuffer()
      self.outbuffer.put(char)
  def set_debug(self, debug):
    self.debug = debug
    self.__telnet.set_debuglevel(debug)

class UI(Frame):
  def __init__(self, master, enterFn, connectFn, helpFn):
    Frame.__init__(self, master)
    self.hostlabel = Label(self, text=" Host ")
    self.hostlabel.grid(row=0, column=0, sticky=E)
    self.hostname = Entry(self, width=28)
    self.hostname.grid(row=0, column=1)
    self.hostname.bind('<Key-Return>', enterFn)
    self.portlabel = Label(self, text=" Port ")
    self.portlabel.grid(row=0, column=2, sticky=E)
    self.portno = Entry(self, width=5)
    self.portno.grid(row=0, column=3)
    self.portno.bind('<Key-Return>', enterFn)
    self.connect = Button(self, width=8)
    self.connect.grid(row=0, column=6, sticky=E+W)
    self.connect.config(command=connectFn) 
    if helpFn:
      self.help = Button(self, width=4, text="Help")
      self.help.grid(row=0, column=7, sticky=W)
      self.help.config(command=helpFn) 
  def focus(self):
    Frame.focus(self)
    self.hostname.focus()
  def getHostName(self):
    return self.hostname.get()
  def getPortNo(self):
    return self.portno.get()
  def setConnectText(self, connected):
    text = "Disconnect" if connected else "Connect"
    self.connect.config(text=text)
  def setHostName(self, host):
    self.hostname.delete(0,END)
    self.hostname.insert(0,host)
  def setPortNo(self, portno):
    self.portno.delete(0,END)
    self.portno.insert(0,portno)
    
class Term(Tk):
  def __debug(self, msg):
    if self.debug:
      sys.stdout.write("%s\n" % msg)
  def __input(self, s):
    #write string to VDT
    for char in s:
      self.vdt.printChar(char)
  def __output(self, s):
    #write string to modem
    for char in s:
      self.modem.outchar(char)
  def __cmdkeys(self):
    #Builds Command Key Dictionary
    cmdkeys = {}
    cmdkeys[(0x40001,45)] = self.__paste    #Shift-Insert
    cmdkeys[(0x40004,45)] = self.__copy     #Ctrl-Insert
    cmdkeys[(0x40005,45)] = self.__copyAll  #Ctrl-Shift-Insert
    return cmdkeys
  def __copy(self, trim=True):
    self.__debug("Copying Text from Terminal")
    lines = self.vdt.getText(trim)
    text = '\n'.join(lines) + '\n'
    self.clipboard_clear()
    self.clipboard_append(text)
    self.__debug("Term: Wrote to clipboard: %s" % text)
  def __copyAll(self):
    return(self.__copy(False))
  def __paste(self):
    text = self.clipboard_get()
    self.__debug("Term: Read from clipboard: %s" % text)
    if python3: data = bytes(text, 'ASCII')
    else: data = text
    self.__debug("Term: Pasting Text: %s" % text)
    self.__output(text)
  def __keypress(self, event):
    #handle keypress from terminal
    self.__debug("Term: keypress %s" % str(event))
    extkey = (event.state,event.keycode)
    self.__debug("Term: extkey=(%x,%d)" % extkey)
    if event.keycode in self.fkeys:
      line = self.fkeys[event.keycode]
      self.__output(line)
    elif extkey in self.cmdkeys:
      self.cmdkeys[extkey]()
    else:
      if event.keycode in self.keymap:
        char = self.keymap[event.keycode]
      else:
        char = event.char
      self.modem.outchar(char)
    return('break')
  def __setUIConnected(self):
    #Set UI conection state to Modem connection state
    self.ui.setConnectText(self.modem.connected)
  def __disconnected(self):
    #handle disconnection
    self.__setUIConnected()
    self.ui.focus()
  def __inChar(self, char):
    #Called by Modem instance each time a character is received
    if char == '\x05':
      #issue Answerback on receipt of ^E
      self.__output("RETROTERM\r\n")
    else:
      #print character to terminal screen
      self.vdt.setCursor(False)
      self.vdt.printChar(char)
      self.vdt.setCursor(True)
  def __connect(self):
    #connect to host
    host = self.ui.getHostName()
    portno = self.ui.getPortNo()
    self.__debug("Connecting to %s:%s" % (host,portno))
    self.modem.connect(host, portno)
    if self.modem.connected:
      self.__setUIConnected()
    self.vdt.focus()
    self.vdt.setCursor(True)
  def __disconnect(self):
    #disconnect from host
    self.modem.disconnect() 
    self.__disconnected()
  def __uiConnect(self):
    #handle Connect/Disconnect Button Click
    if self.modem.connected:
      self.__disconnect()
    else:
      self.__connect()
  def __uiHelp(self):
    return
  def __uiDefault(self, event=None):
    #handle Enter Key from Host and Port Entries
    if not self.modem.connected:
      self.__connect()
  def __vdtFocused(self, event=None):
    if not self.modem.connected:
      self.ui.focus()
  def __parseArgs(self):
    parser = argparse.ArgumentParser()
    parser.add_argument("host", nargs="?", default=HOSTNAME, help="Host Name or IP Address")
    parser.add_argument("port", nargs="?", default=HOSTPORT, help="TCP Port (Default=%s)" % HOSTPORT)
    parser.add_argument("-c", "--connect", action='store_true', help="Connect Immediately")
    parser.add_argument("-d", "--debug", action='store_true', help="Debug Level (0-?)")
    parser.add_argument("-f", "--fkeys", type=str, default=None, help="Function Key Assignments")
    parser.add_argument("-m", "--msg", type=str, default=None, help="Message to display on terminal")
    args = parser.parse_args()
    return args
  def __parseFKeys(self, keydef):
    fkeys = {}
    if keydef:
      keycode = 112 #F1
      delim = keydef[0]
      self.__debug("delim=%s" % delim)
      keydef = keydef[1:]
      for keyval in keydef.split(delim):
        if python3: keystr = keyval.encode('ASCII').decode('unicode_escape')
        else: keystr = keyval.decode('string_escape')
        fkeys[keycode] = keystr
        keycode = keycode + 1
      self.__debug("fkeys=%s" % str(fkeys))
    return fkeys
  def __init__(self):
    Tk.__init__(self)
    self.args = self.__parseArgs()
    self.echo = IntVar()
    #self.iconbitmap('retroterm.ico')
    self.cmdkeys = self.__cmdkeys()
    self.keymap = KEYMAP
    self.title("RetroTerm")
    self.modem = Modem(self.__inChar, self.after, self.__disconnected)
    self.ui = UI(self, self.__uiDefault, self.__uiConnect, False)
    self.ui.pack()
    self.__setUIConnected()
    self.vdt = VDT(self)
    self.vdt.pack()
    self.vdt.bind('<Key>', self.__keypress)
    self.vdt.bind('<FocusIn>', self.__vdtFocused)
    self.ui.setHostName(self.args.host)
    self.ui.setPortNo(self.args.port)
    self.debug=self.args.debug
    self.modem.set_debug(self.debug)
    self.fkeys = self.__parseFKeys(self.args.fkeys)
    if self.args.msg: self.__input(self.args.msg)
    if self.args.connect: self.__connect()
    else: self.ui.focus()


if __name__ == "__main__":
  term = Term()
  term.mainloop()
